{"name":"Password-strength","tagline":"password strength checker","body":"# password-strength\r\npassword strength checker\r\n\r\n# Install\r\n> use bower\r\n\r\n```bash\r\nbower install password-strength --save\r\n```\r\n\r\n> [Download source](https://raw.githubusercontent.com/wahaha2012/password-strength/master/bundle.js)\r\n\r\n# Usage\r\n> global\r\n\r\n```html\r\n<script src=\"./bundle.js\"></script>\r\n```\r\n\r\n> amd or cmd\r\n\r\n```js\r\nvar PasswordStrength = require('password-strength/bundle');\r\n```\r\n\r\n# Demo\r\n> minimum config, auto find password field\r\n\r\n```js\r\nnew PasswordStrength();\r\n```\r\n\r\n\r\n> add password field manually\r\n\r\n```js\r\nvar Demo = new PasswordStrength({\r\n    autoFindInputs: false\r\n});\r\nvar inputs = document.querySelectorAll('input[type=password]');\r\n\r\nDemo.addInputs(inputs[0]);\r\n```\r\n\r\n\r\n> custom strength tag text and strength result info\r\n\r\n```js\r\nvar Demo = new PasswordStrength({\r\n    autoFindInputs: false,\r\n    tagText:'Strength',\r\n    strengthTexts:['Empty','Bad','Weak','Middle','Good','Strong']\r\n});\r\nvar inputs = document.querySelectorAll('input[type=password]');\r\n\r\nDemo.addInputs(inputs[0]);\r\n```\r\n\r\n# API\r\n```js\r\nnew PasswordStrength(config) \r\nconfig : {\r\n    /*base config and default values*/\r\n    //strength info background\r\n    background: {\r\n        'weaker': '#f22a26',\r\n        'weak': '#ff880a',\r\n        'normal': '#b2a30a',\r\n        'strong': '#99b20a',\r\n        'stronger': '#58a80a'\r\n    },\r\n    checkLength: 6, //password minimum length required\r\n    strengthTexts:['空','差','弱','中','好','强'], //strength grade info\r\n    tagText: '密码强度', //strength tag text\r\n    autoFindInputs: true, //auto find all password inputs\r\n    zIndex: 10000 //set css z-index for strength tips\r\n}\r\n\r\n/* methods */\r\n/**\r\n * add password input fields\r\n * @param  {DomElement} inputs  password input dom elements\r\n * @return {Null}           void\r\n */\r\n.addInputs(inputs);\r\n\r\n/**\r\n * update field strength status\r\n * @param  {DomElement} domElement  password input dom element\r\n * @return {Null}           void\r\n */\r\n.updateStrength(domElement);\r\n\r\n/**\r\n * show field strength status\r\n * @param  {DomElement} domElement  password input dom element\r\n * @return {Null}           void\r\n */\r\n.showStrength(domElement);\r\n\r\n/**\r\n * hidden field strength status\r\n * @return {Null}           void\r\n */\r\n.hideStrength();\r\n\r\n/**\r\n * check field strength\r\n * @param  {DomElement}[optional] domElements  password input dom elements, if not provide, check all inputs added to instance.\r\n * @return {Boolean}           verify pass or not\r\n */\r\n.verify([domElements]);\r\n\r\n/**\r\n * check password strength\r\n * @param  {String} password  string password need check\r\n * @param  {Integer} minLength  minimum password length required\r\n * @return {Object}  {strength: Integer[1-5], text: String['weak'...]}\r\n */\r\n.checkStrength(password, minLength);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}